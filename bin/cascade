#!/bin/bash

set -e

usage_exit() {
	echo "Usage: cascade"
	echo "-p <project_root_dir_name>"
	echo "[-v <vec_file_name = positive.vec>]"
	echo "[-w <sampleWidth = 24>]"
	echo "[-h <sampleHeight = 24>]"
	echo "[-f <featureType = HOG>]"
	echo "[-m <modelName = default>]"
	exit 1
}

error_handling() {
	if [ -v $PROJECT_ROOT ]; then
		echo -e "\e[31mError: Specify project root dirname\e[m" 1>&2
		usage_exit
	fi

	local ERROR_FLAG=0

	if [ ! -e $PROJECT_ROOT ]; then
		echo -e "\e[31mError: $PROJECT_ROOT: No such project root directory\e[m" 1>&2
		usage_exit
	fi

	if [ ! -e $POS_TXT ]; then
		echo -e "\e[31mError: $POS_TXT: No such positive file\e[m" 1>&2
		ERROR_FLAG=1
	fi

	if [ ! -e $NEG_TXT ]; then
		echo -e "\e[31mError: $NEG_TXT: No such negative file\e[m" 1>&2
		ERROR_FLAG=1
	fi

	if [ $ERROR_FLAG = 1 ]; then
		exit 1
	fi
}

# initial value
WIDTH=24
HEIGHT=24
VEC_NAME=positive.vec
FEATURE_TYPE=HOG
MODEL_NAME=default

# optgets
while getopts v:w:h:f:p:m: OPT
do
	case $OPT in
		v) 	VEC_NAME=$OPTARG
			;;
		w)	WIDTH=$OPTARG
			;;
		h)	HEIGHT=$OPTARG
			;;
		f)	FEATURE_TYPE=$OPTARG
			;;
		p)	PROJECT_ROOT=$OPTARG
			;;
		m)	MODEL_NAME=$OPTARG
			;;
		\?)	usage_exit
			;;
	esac
done


POS_TXT=$PROJECT_ROOT/src/pos.txt
NEG_TXT=$PROJECT_ROOT/src/neg.txt

error_handling

# calculate sammple num
ACUTUAL_POS_NUM=`wc -l $PROJECT_ROOT/src/pos.txt | cut -d' ' -f1`
POS_NUM=$((`wc -l $PROJECT_ROOT/src/pos.txt | cut -d' ' -f1` * 85 / 100))
NEG_NUM=$((`wc -l $PROJECT_ROOT/src/neg.txt | cut -d' ' -f1` * 95 / 100))


# commands
opencv_createsamples \
-info $PROJECT_ROOT/src/pos.txt \
-vec $PROJECT_ROOT/src/$VEC_NAME \
-w $WIDTH \
-h $HEIGHT \
-num $ACUTUAL_POS_NUM \

mkdir -p $PROJECT_ROOT/model/$MODEL_NAME

cd $PROJECT_ROOT/src

opencv_traincascade \
-data ../data/model/$MODEL_NAME \
-vec $VEC_NAME \
-bg neg.txt \
-w $WIDTH \
-h $HEIGHT \
-featureType $FEATURE_TYPE \
-numPos $POS_NUM \
-numNeg $NEG_NUM \
-bt RAB
